<html>
<body>

  <h1>XSSploit manual</h1>
  <p>
    Welcome to XSSploit, the XSS scanner and exploiter. This document will show you how to use this application, from the command line and with the graphical interface.
  </p>

  <h2>Files</h2>
  <p>
    XSSploit comes with several files :
  </p>
  <ul>
    <li><b>xssploit.py</b><br/>
      The main file. Contains the XSSploit core and the command line interface.
    </li>
    <li><b>gui.py</b><br/>
      The GUI interface.
    </li>
    <li><b>extensions.txt</b><br/>
      XSSploit's spider crawls web pages using REGEXPs. This file contains the file extensions on the server that should be spidered. To add a new extension, simply add a new line in this file and write your extension. Don't forget the dot.
    </li>
    <li><b>exploits.xml</b><br/>
      The exploits database. Please refer to this file to create new exploits.
    </li>
    <li><b>report.xsl</b><br/>
      This stylesheet is a very basic example on how to display the report generated by XSSploit. Put this file in the same folder as the XML report and point your browser to the report file to see the report.
    </li>
  </ul>

  <h2>Command line version</h2>
  <p>
    This is the default interface, the application launches with the following command : <br/><br/><code>python xssploit.py <i>hostname</i> [options]</code>
  </p>
  <h3>Command line options</h3>
    <ul>
      <li><b><i>hostname</i></b><br/>
	The URL of the site to be analyzed. It should be the full URL, like <i>http://victim.com/</i>
      </li>
      <li><b>-a <i>user:pass</i></b><br/>
	Use HTTP basic authentication
      </li>
      <li><b>-d</b><br/>
	Disable the permanent XSS checking.
      </li>
      <li><b>-h</b> or <b>--help</b><br/>
	Prints a help message.
      </li>
      <li><b>-i</b><br/>
	Enters interactive mode after the scan. This mode is useful, as you can then interact with XSSploit to exploit the XSS vulnerabilities it found.
      </li>
      <li><b>-l <i>filename</i></b><br/>
	Log everything in <i>filename</i>
      </li>
      <li><b>-p <i>proxyString</i></b><br/>
	Use an HTTP proxy. the syntax is the same as used in the urllib2 Python module, for example, you can use <i>http://user:pass@host:port</i>
      </li>
      <li><b>-t</b><br/>
	Tests every XSS found, and print an URL containing an example.
      </li>
      <li><b>-v</b><br/>
	Prints the application version.
      </li>
      <li><b>-w <i>filename</i></b><br/>
	Writes an XML report in <i>filename</i>
      </li>
      <li><b>-x <i>URL</i></b><br/>
	Exclude this URL, you can place a REGEXP here, any URL that matches will be ignored.
      </li>
    </ul>

  <h3>Usages</h3>
  <h4>Scan and report</h4>
  <p>
    The main puropse of XSSploit is to scan a website, find every form and parameter passed to web pages, fuzz them, analyze the results and print a report. Let's say we want to analyze victim.com website. Get to a terminal and type<br/><br/>
    <code>
      python xssploit.py http://victim.com/ -w report.xml
    </code>
    <br/><br/>
    The output will be like this :<br/><br/>
  <code>
    Spidering the site...<br/>
    Analyzing the forms...<br/>
    ====== XSS ======<br/>
    = URL    : http://victim.com/Search.asp<br/>
    = Type   : non-persistant<br/>
    = Method : get<br/>
    === Faulty parameter : q<br/>
    ===== Contexts :<br/>
    Writing the xml report...<br/>
  </code>
  <br/>
  A report is created in the file report.xml.
  </p>

  <h4>Scan and exploit</h4>
  <p>
  In this second example, we will look at one of the main features of XSSploit : the exploit generator.<br/>
  XSSploit uses the data collected to compile JavaScript code, so it can be executed, even if there are input filters.<br/>
  Let's take our last example and create a Messagebox XSS :<br/>
  <code>
    python xssploit.py http://victim.com/ -i<br/>
    Spidering the site...<br/>
    Analyzing the forms...<br/>
    ====== XSS ======<br/>
    = URL    : http://victim.com/Search.asp<br/>
    = Type   : non-persistant<br/>
    = Method : get<br/>
    === Faulty parameter : q<br/>
    ===== Contexts :<br/>
    <br/>
    Welcome to XSSploit<br/>
    XSS found are stored in the xssCollection list<br/>
    <b>Let's start by creating a compiler instance, we call it msgBoxCompiler</b><br/>
    >>> msgboxCompiler=compiler()<br/>
    <b>Display the available exploits</b><br/>
    >>> msgboxCompiler.list()<br/>
    Printing exploits :<br/>
    Name                    Description<br/>
    messagebox              Displays a messagebox<br/>
    include         	    Includes another javascript (typically BeEF or else...)<br/>
    iframe                  Shows an iFrame on the entire screen, with user supplied page on it<br/>
    <b>Select the messagebox exploit</b><br/>
    >>> msgboxCompiler.select('messagebox')<br/>
    <b>Show the options associated with the messagebox exploit</b><br/>
    >>> msgboxCompiler.options<br/>
    {'MESSAGE': 'XSS found by XSSploit'}<br/>
    <b>Now, we'll change our message by 'Hello tutorial !'</b><br/>
    >>> msgboxCompiler.options['MESSAGE']='Hello tutorial !'<br/>
    >>> msgboxCompiler.options<br/>
    {'MESSAGE': 'Hello tutorial !'}<br/>
    <b>After the scan, xssCollection contains a list of all the XSS found, show them</b><br/>
    >>> xssCollection<br/>
    [<__main__.xss instance at 0x1200bd8>]<br/>
    <b>Display again the summary of this XSS</b><br/>
    >>> xssCollection[0].printSummary()<br/>
    <br/>
    ====== XSS ======<br/>
    = URL    : http://victim.com/Search.asp<br/>
    = Type   : non-persistant<br/>
    = Method : get<br/>
    === Faulty parameter : q<br/>
    ===== Contexts :<br/>
    <b>Exploit the XSS !</b><br/>
    >>> msgboxCompiler.exploit(xssCollection[0])<br/>
    'http://victim.com/Search.asp?q=%3Cscript%3Ealert%28%22Hello+tutorial+%21%22%29%3B%3C%2Fscript%3E'<br/>
  </code>
  <br/>
  Et voila !
  </p>
  <h2>GUI version</h2>
  <p>
    The GUI provides a nice windowed interface, it's written in wxPython, so make sure you yave it installed before launching it.
  </p>
  <h3>Sample session</h3>
  <p>
    In this chapter, we will show you how to scan a site, play with some XSS and save a report.
  <p>
  <h4>Scan a website</h4>
  <p>
    Launch the gui with the command<br/>
    <code>
      python gui.py<br/>
    </code>
    <br/>
    The GUI will show up. Now put the website address in the top field and press Spider.<br/>
    <img src="images/gui1.png"><br/><br/>
    After the site has been spidered, you can see the web pages analyzed, and the forms found.<br/>
    <img src="images/gui2.png"><br/><br/>
    At this point, you can save the forms and parameters, so you don't have to spider the website again and again. Go to the File menu and select Save form DB...<br/>
    Not it's time to analyze the fields and check if they are vulnerable to XSS. Click on the Analyze button.<br/>
    After some time, XSSploit should tell you that the anlysis is finished, and how many XSS have been found in the status bar. You can now go to the XSS tab.<br/>
    The two first fields are the XSS vulnerabilities found. Clicking on one opens the second field, showing all the properties of this vulnerability.<br/>
    <img src="images/gui3.png"><br/><br/>
    Just below lays the exploit tool. The left listbox shows all the exploits found in the exploits.xml file. Clicking on one of them shows a little description, and on the right, the exploit options are showing. click on them to modify their content.<br/>
    <img src="images/gui4.png"><br/><br/>
    Clicking on the Generate code button displays the JavaScript that will be executed on the left, and the exploitable URL on the right.<br/>
    <img src="images/gui5.png"><br/><br/>
    Once you finished playing with the XSS, let's write a report. Click on the Report tab.<br/>
    Select the fields you want to show in the report and click on the save button.
    <img src="images/gui6.png"><br/><br/>
    In the case you need to use a proxy, HTTP authentication or else, get to the Edit menu -> Preferences...<br/>
    <img src="images/gui7.png">
  </p>
</body>
</html>
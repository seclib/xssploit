#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.6.3 on Fri Sep 12 01:09:05 2008

import wx
from wxPython.wx import *

from xssploit import *

# begin wxGlade: extracode
# end wxGlade

class EncoderDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: EncoderDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_20 = wx.StaticText(self, -1, "Clear text")
        self.txtClear = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.btnEncode = wx.Button(self, -1, "Encode")
        self.static_line_2 = wx.StaticLine(self, -1)
        self.label_21 = wx.StaticText(self, -1, "Hexadecimal value")
        self.txtHex = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.static_line_7 = wx.StaticLine(self, -1)
        self.label_22 = wx.StaticText(self, -1, "Hexadecimal value (with semicolons)")
        self.txtHexSemi = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.static_line_10 = wx.StaticLine(self, -1)
        self.label_23 = wx.StaticText(self, -1, "Decimal value")
        self.txtDec = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.static_line_11 = wx.StaticLine(self, -1)
        self.btnOkCodec = wx.Button(self, -1, "OK")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.compilerInstance=compiler()

        #Event bindings
        self.btnOkCodec.Bind(wx.EVT_BUTTON, self.onOK, self.btnOkCodec)
        self.btnEncode.Bind(wx.EVT_BUTTON, self.onEncode, self.btnEncode)
    
    def onEncode(self,  event):
        """
        When clicking on the Encode button
        """
        text=self.txtClear.GetValue()
        self.txtHex.SetValue(self.compilerInstance._hexEncode(text))
        self.txtHexSemi.SetValue(self.compilerInstance._hexSemiEncode(text))
        self.txtDec.SetValue(self.compilerInstance._decEncode(text))
    
    def onOK(self,  event):
        """
        When clicking on the OK button
        """
        self.Close()

    def __set_properties(self):
        # begin wxGlade: EncoderDialog.__set_properties
        self.SetTitle("String encoder")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: EncoderDialog.__do_layout
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_17.Add(self.label_20, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.txtClear, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.btnEncode, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        sizer_17.Add(self.static_line_2, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.label_21, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.txtHex, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.static_line_7, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.label_22, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.txtHexSemi, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.static_line_10, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.label_23, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.txtDec, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.static_line_11, 0, wx.ALL|wx.EXPAND, 2)
        sizer_17.Add(self.btnOkCodec, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        self.SetSizer(sizer_17)
        sizer_17.Fit(self)
        self.Layout()
        # end wxGlade

# end of class EncoderDialog


class OptionDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: OptionDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.notebook_2 = wx.Notebook(self, -1, style=0)
        self.notebook_2_pane_2 = wx.Panel(self.notebook_2, -1)
        self.notebook_2_pane_1 = wx.Panel(self.notebook_2, -1)
        self.chkProxy = wx.CheckBox(self.notebook_2_pane_1, -1, "Use HTTP proxy :")
        self.label_13 = wx.StaticText(self.notebook_2_pane_1, -1, "Host : ")
        self.txtProxyHost = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.label_15 = wx.StaticText(self.notebook_2_pane_1, -1, "Port : ")
        self.txtProxyPort = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.label_14 = wx.StaticText(self.notebook_2_pane_1, -1, "User : ")
        self.txtProxyUser = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.label_16 = wx.StaticText(self.notebook_2_pane_1, -1, "Password : ")
        self.txtProxyPass = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.chkAuth = wx.CheckBox(self.notebook_2_pane_1, -1, "Use HTTP authentication :")
        self.label_17 = wx.StaticText(self.notebook_2_pane_1, -1, "User : ")
        self.txtAuthUser = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.label_18 = wx.StaticText(self.notebook_2_pane_1, -1, "Password : ")
        self.txtAuthPass = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.static_line_4 = wx.StaticLine(self.notebook_2_pane_1, -1)
        self.label_9 = wx.StaticText(self.notebook_2_pane_1, -1, "Manage exclusions :")
        self.lsExclusions = wx.ListBox(self.notebook_2_pane_1, -1, choices=[])
        self.txtExclusionsUrl = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.btnExclusionsAdd = wx.Button(self.notebook_2_pane_1, -1, "Add")
        self.btnExclusionsRemove = wx.Button(self.notebook_2_pane_1, -1, "Remove")
        self.label_11 = wx.StaticText(self.notebook_2_pane_2, -1, "Note : These options are for advanced use of XSSploit")
        self.chkPermCheck = wx.CheckBox(self.notebook_2_pane_2, -1, "Permanent XSS checks")
        self.static_line_6 = wx.StaticLine(self.notebook_2_pane_2, -1)
        self.label_12 = wx.StaticText(self.notebook_2_pane_2, -1, "Number of simultaneous parameters : (CAUTION, it increases the checking time exponantially) : ")
        self.txtMaxParams = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
        self.btnOKPrefs = wx.Button(self, -1, "OK")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        #Initial state of controls
        self.proxyCtrlState(False)
        self.authCtrlState(False)
        
        #Initial values
        #Proxy
        if self.Parent.useProxy==True:
            self.chkProxy.SetValue(True)
            self.proxyCtrlState(True)
        self.txtProxyHost.SetValue(self.Parent.proxyHost)
        self.txtProxyPort.SetValue(self.Parent.proxyPort)
        self.txtProxyUser.SetValue(self.Parent.proxyUser)
        self.txtProxyPass.SetValue(self.Parent.proxyPass)
        #HTTP auth
        if self.Parent.useAuth==True:
            self.chkAuth.SetValue(True)
            self.authCtrlState(True)
        self.txtAuthUser.SetValue(self.Parent.authUser)
        self.txtAuthPass.SetValue(self.Parent.authPass)
        #Exclusion list
        self.lsExclusions.InsertItems(self.Parent.wwwIOInstance.getExcluedUrls(),  0)
        #Number of parameters
        self.txtMaxParams.SetValue(str(self.Parent.maxParams))
        #Permanent checking
        if self.Parent.doPermCheck==1:
            self.chkPermCheck.SetValue(True)
        else:
            self.chkPermCheck.SetValue(False)

        #Event binding
        self.btnOKPrefs.Bind(wx.EVT_BUTTON, self.onOK, self.btnOKPrefs)
        self.chkProxy.Bind(wx.EVT_CHECKBOX,  self.onProxy,  self.chkProxy)
        self.chkAuth.Bind(wx.EVT_CHECKBOX,  self.onAuth,  self.chkAuth)
        self.btnExclusionsAdd.Bind(wx.EVT_BUTTON,  self.onAdd,  self.btnExclusionsAdd)
        self.btnExclusionsRemove.Bind(wx.EVT_BUTTON,  self.onRemove,  self.btnExclusionsRemove)
        self.lsExclusions.Bind(wx.EVT_LISTBOX,  self.onExclusionSelected,  self.lsExclusions)
    
    def onExclusionSelected(self,  event):
        """
        When the user selects an item in the list
        Displays it in the textbox
        """
        position=self.lsExclusions.GetSelections()
        if len(position)>0:
            self.txtExclusionsUrl.SetValue(self.lsExclusions.GetString(position[0]))
    
    def onRemove(self,  event):
        """
        When the use clicks on the remove button
        Removes the entry from the list, and clears the textbox
        """
        position=self.lsExclusions.GetSelections()
        #If an item is selected
        if len(position)>0:
            self.lsExclusions.Delete(position[0])
            self.txtExclusionsUrl.Clear()
    
    def onAdd(self,  event):
        """
        When the user clicks on the add button
        Adds a new entry in the exclusion list
        """
        if self.txtExclusionsUrl.GetValue() == '':
            return
        else:
            self.lsExclusions.InsertItems([self.txtExclusionsUrl.GetValue()],  0)
            self.txtExclusionsUrl.Clear()
    
    def onAuth(self,  event):
        """
        When the user clicks on the auth checkbox
        Enables the auth parameters
        """
        if self.chkAuth.GetValue() == True:
            self.authCtrlState(True)
        else:
            self.authCtrlState(False)
    
    def onProxy(self,  event):
        """
        When the user clicks on the proxy checkbox
        Enables the proxy parameters
        """
        if self.chkProxy.GetValue() == True:
            self.proxyCtrlState(True)
        else:
            self.proxyCtrlState(False)

    def proxyCtrlState(self,  state):
        """
        Enables or disables the state of the proxy configuration controls
        @type state: Boolean
        @param state: true is enabled, false is disabled
        """
        self.txtProxyHost.Enable(state)
        self.txtProxyPort.Enable(state)
        self.txtProxyUser.Enable(state)
        self.txtProxyPass.Enable(state)
    
    def authCtrlState(self,  state):
        """
        Enables or disables the state of the authentication configuration controls
        @type state: Boolean
        @param state: true is enabled, false is disabled
        """
        self.txtAuthUser.Enable(state)
        self.txtAuthPass.Enable(state)
    
    def onOK(self,  event):
        """
        When the user clicks on the OK button
        Saves the parameters and closes the window.
        """
        wwwIOInstance=self.Parent.wwwIOInstance
        
        #Proxy config
        proxyString=''
        if self.chkProxy.GetValue()==True:
            self.Parent.useProxy=True
            #build an opener string like http://[user]:[pass]@[host]:[port]
            if self.txtProxyHost.GetValue()<>"":
                proxyHost=self.txtProxyHost.GetValue()
                self.Parent.proxyHost=proxyHost
                if self.txtProxyPort.GetValue()<>"":
                    proxyPort=self.txtProxyPort.GetValue()
                    self.Parent.proxyPort=proxyPort
                else:
                    #Defaults to 8080
                    proxyPort='8080'
                if self.txtProxyUser.GetValue<>"":
                    proxyUser=self.txtProxyUser.GetValue()
                    self.Parent.proxyUser=proxyUser
                    proxyPass=self.txtProxyPass.GetValue()
                    self.Parent.proxyPass=proxyPass
                    proxyString='http://'+proxyUser+':'+proxyPass+'@'+proxyHost+':'+proxyPort
                else:
                    proxyString='http://'+proxyHost+':'+proxyPort
        else:
            self.Parent.useProxy=False
        wwwIOInstance.proxyConfig(proxyString)
        #HTTP auth config
        if self.chkAuth.GetValue()==True:
            self.Parent.useAuth=True
            wwwIOInstance.authConfig(self.txtAuthUser.GetValue(),  self.txtAuthPass.GetValue())
            self.Parent.authUser=self.txtAuthUser.GetValue()
            self.Parent.authPass=self.txtAuthPass.GetValue()
        else:
            self.Parent.useAuth=False
        #Exclusion config
        self.Parent.wwwIOInstance._excluedUrl=[]
        for url in self.lsExclusions.GetStrings():
            wwwIOInstance.excludeUrl(url)
        #Max parameters config
        try:
            self.Parent.maxParams=int(self.txtMaxParams.GetValue())
        except ValueError:
            self.Parent.maxParams=2
        self.Close()
        #Permanent check config
        if self.chkPermCheck.GetValue()==True:
            self.Parent.doPermCheck=1
        else:
            self.Parent.doPermCheck=0

    def __set_properties(self):
        # begin wxGlade: OptionDialog.__set_properties
        self.SetTitle("Preferences")
        self.txtProxyHost.SetMinSize((150, 25))
        self.txtProxyPort.SetMinSize((150, 25))
        self.txtProxyUser.SetMinSize((150, 25))
        self.txtProxyPass.SetMinSize((150, 25))
        self.txtAuthUser.SetMinSize((150, 25))
        self.txtAuthPass.SetMinSize((150, 25))
        self.chkPermCheck.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: OptionDialog.__do_layout
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_7_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_10 = wx.GridSizer(1, 1, 0, 0)
        grid_sizer_9 = wx.GridSizer(1, 4, 0, 0)
        grid_sizer_8 = wx.GridSizer(2, 4, 0, 0)
        sizer_7_copy.Add(self.chkProxy, 0, wx.ALL, 2)
        grid_sizer_8.Add(self.label_13, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_8.Add(self.txtProxyHost, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_8.Add(self.label_15, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_8.Add(self.txtProxyPort, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_8.Add(self.label_14, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_8.Add(self.txtProxyUser, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_8.Add(self.label_16, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_8.Add(self.txtProxyPass, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_7_copy.Add(grid_sizer_8, 1, wx.EXPAND, 0)
        sizer_7_copy.Add(self.chkAuth, 0, wx.ALL, 2)
        grid_sizer_9.Add(self.label_17, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_9.Add(self.txtAuthUser, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_9.Add(self.label_18, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_9.Add(self.txtAuthPass, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_7_copy.Add(grid_sizer_9, 1, wx.EXPAND, 0)
        sizer_7_copy.Add(self.static_line_4, 0, wx.EXPAND, 0)
        sizer_7_copy.Add(self.label_9, 0, wx.ALL, 2)
        grid_sizer_10.Add(self.lsExclusions, 0, wx.ALL|wx.EXPAND, 2)
        sizer_13.Add(grid_sizer_10, 1, wx.EXPAND, 0)
        sizer_14.Add(self.txtExclusionsUrl, 0, wx.ALL|wx.EXPAND, 2)
        sizer_14.Add(self.btnExclusionsAdd, 0, wx.ALL, 2)
        sizer_14.Add(self.btnExclusionsRemove, 0, wx.ALL, 2)
        sizer_13.Add(sizer_14, 1, wx.EXPAND, 0)
        sizer_7_copy.Add(sizer_13, 1, wx.EXPAND, 0)
        self.notebook_2_pane_1.SetSizer(sizer_7_copy)
        sizer_12.Add(self.label_11, 0, wx.ALL, 2)
        sizer_12.Add(self.chkPermCheck, 0, wx.ALL, 2)
        sizer_12.Add(self.static_line_6, 0, wx.ALL|wx.EXPAND, 2)
        sizer_12.Add(self.label_12, 0, wx.ALL, 2)
        sizer_12.Add(self.txtMaxParams, 0, wx.ALL, 2)
        self.notebook_2_pane_2.SetSizer(sizer_12)
        self.notebook_2.AddPage(self.notebook_2_pane_1, "Options")
        self.notebook_2.AddPage(self.notebook_2_pane_2, "Advanced")
        sizer_7.Add(self.notebook_2, 1, wx.EXPAND, 0)
        sizer_7.Add(self.btnOKPrefs, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        self.SetSizer(sizer_7)
        sizer_7.Fit(self)
        self.Layout()
        # end wxGlade

# end of class OptionDialog


class XSRFDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: XSRFDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_5 = wx.StaticText(self, -1, "Full URL to be queried : ")
        self.txtXSRFUrl = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.chkIsPost = wx.CheckBox(self, -1, "POST request")
        self.btnGenerateXSRF = wx.Button(self, -1, "&Generate")
        self.static_line_3 = wx.StaticLine(self, -1)
        self.label_8 = wx.StaticText(self, -1, "Result : ")
        self.txtXSRFResult = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.btnOkXSRF = wx.Button(self, -1, "&OK")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        #Event binding
        self.btnOkXSRF.Bind(wx.EVT_BUTTON, self.onOK, self.btnOkXSRF)
        self.btnGenerateXSRF.Bind(wx.EVT_BUTTON,  self.onGenerate,  self.btnGenerateXSRF)

    def onOK(self,  event):
        """
        When the user clicks on the OK button.
        Closes the window.
        """
        self.Close()
    
    def onGenerate(self,  event):
        """
        When the user clicks on the Generate button
        Generate the request injection and displays it in the text field
        """
        self.txtXSRFResult.SetValue(self.genXSRF(self.txtXSRFUrl.GetValue()))

    def genXSRF(self,  url):
        """
        Generates an auto-submit form with hidden parameters
        @type url: String
        @param url: The full URL with parameters, in GET form (like http://victim.com/index.asp?foo=bar
        @return: A string containing the HTML code
        """
        if url=='':
            return ''
        url,  params = url.split('?')
        if self.chkIsPost.GetValue()==True:
            method='POST'
        else:
            method='GET'
        result='<form name="XSSploitForm" method="'+method+'" action="'+url+'">\n'
        for param in params.split('&'):
            name,  value=param.split('=')
            result=result+'<input type="hidden" name="'+name+'" value="'+value+'">\n'
        result=result+'</form>\n<SCRIPT language="JavaScript">\ndocument.XSSploitForm.submit();\n</SCRIPT>'
        return result

    def __set_properties(self):
        # begin wxGlade: XSRFDialog.__set_properties
        self.SetTitle("XSRF editor")
        self.SetSize((400, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: XSRFDialog.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_7 = wx.GridSizer(1, 1, 0, 0)
        sizer_5.Add(self.label_5, 0, wx.ALL, 2)
        sizer_5.Add(self.txtXSRFUrl, 0, wx.ALL|wx.EXPAND, 2)
        sizer_5.Add(self.chkIsPost, 0, wx.ALL, 2)
        sizer_5.Add(self.btnGenerateXSRF, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        sizer_5.Add(self.static_line_3, 0, wx.ALL|wx.EXPAND, 2)
        sizer_5.Add(self.label_8, 0, wx.ALL, 2)
        grid_sizer_7.Add(self.txtXSRFResult, 0, wx.ALL|wx.EXPAND, 2)
        sizer_5.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        sizer_5.Add(self.btnOkXSRF, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        self.SetSizer(sizer_5)
        self.Layout()
        # end wxGlade

# end of class XSRFDialog

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_5 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        
        # Menu Bar
        self.MainFrameMenuBar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.mnuLoadFormDB = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Load Form DB...", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mnuLoadFormDB)
        self.mnuSaveFormDB = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Save Form DB...", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mnuSaveFormDB)
        wxglade_tmp_menu.AppendSeparator()
        self.mnuQuit = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "&Quit", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mnuQuit)
        self.MainFrameMenuBar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        self.mnuPrefs = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "&Preferences", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mnuPrefs)
        self.MainFrameMenuBar.Append(wxglade_tmp_menu, "&Edit")
        wxglade_tmp_menu = wx.Menu()
        self.mnuCodec = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "&String encoder", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mnuCodec)
        self.mnuXSRF = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "&XSRF editor", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mnuXSRF)
        self.MainFrameMenuBar.Append(wxglade_tmp_menu, "&Tools")
        wxglade_tmp_menu = wx.Menu()
        self.mnuAbout = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "&About XSSploit", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mnuAbout)
        self.MainFrameMenuBar.Append(wxglade_tmp_menu, "&Help")
        self.SetMenuBar(self.MainFrameMenuBar)
        # Menu Bar end
        self.MainFrameStatusBar = self.CreateStatusBar(1, 0)
        self.txtUrl = wx.TextCtrl(self.notebook_1_pane_1, -1, "http://localhost/xss/")
        self.btnSpider = wx.Button(self.notebook_1_pane_1, -1, "Spider")
        self.label_1 = wx.StaticText(self.notebook_1_pane_1, -1, "Pages spidered : ")
        self.lsPages = wx.ListBox(self.notebook_1_pane_1, -1, choices=[])
        self.label_4 = wx.StaticText(self.notebook_1_pane_1, -1, "Forms Found :")
        self.trvForms = wx.TreeCtrl(self.notebook_1_pane_1, -1, style=wx.TR_HAS_BUTTONS|wx.TR_NO_LINES|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.btnAnalyze = wx.Button(self.notebook_1_pane_1, -1, "Analyze")
        self.label_2 = wx.StaticText(self.notebook_1_pane_3, -1, "XSS found :")
        self.lsXSS = wx.ListBox(self.notebook_1_pane_3, -1, choices=[], style=wx.LB_SINGLE)
        self.trvXssSummary = wx.TreeCtrl(self.notebook_1_pane_3, -1, style=wx.TR_HAS_BUTTONS|wx.TR_NO_LINES|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.static_line_1 = wx.StaticLine(self.notebook_1_pane_3, -1)
        self.label_19 = wx.StaticText(self.notebook_1_pane_4, -1, "Exploitable XSS :")
        self.cmbExploitableXss = wx.ComboBox(self.notebook_1_pane_4, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.static_line_8 = wx.StaticLine(self.notebook_1_pane_4, -1)
        self.label_3 = wx.StaticText(self.notebook_1_pane_4, -1, "Available exploits :")
        self.lsExploits = wx.ListBox(self.notebook_1_pane_4, -1, choices=[], style=wx.LB_SINGLE)
        self.lblExploitDescription = wx.StaticText(self.notebook_1_pane_4, -1, "Description")
        self.label_6 = wx.StaticText(self.notebook_1_pane_4, -1, "Options :")
        self.lsExploitOptions = wx.ListBox(self.notebook_1_pane_4, -1, choices=[], style=wx.LB_SINGLE)
        self.txtOptionValue = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style=wx.TE_MULTILINE)
        self.btnGenCode = wx.Button(self.notebook_1_pane_4, -1, "Generate exploit code")
        self.txtJavaCode = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style=wx.TE_MULTILINE)
        self.txtExploitUrl = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style=wx.TE_MULTILINE|wx.TE_RICH|wx.TE_RICH2|wx.TE_AUTO_URL)
        self.label_10 = wx.StaticText(self.notebook_1_pane_5, -1, "Report options")
        self.static_line_5 = wx.StaticLine(self.notebook_1_pane_5, -1)
        self.chkRptSpider = wx.CheckBox(self.notebook_1_pane_5, -1, "Include spidered pages")
        self.chkRptForm = wx.CheckBox(self.notebook_1_pane_5, -1, "Include forms and parameters found")
        self.chkRptXSS = wx.CheckBox(self.notebook_1_pane_5, -1, "Include XSS found")
        self.chkRptPXSS = wx.CheckBox(self.notebook_1_pane_5, -1, "Include possible XSS (not exploitable by XSSploit)")
        self.chkRptExample = wx.CheckBox(self.notebook_1_pane_5, -1, "Include example (Messagebox)")
        self.btnRptSave = wx.Button(self.notebook_1_pane_5, -1, "Save...")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        #Interface inits
        self.btnAnalyze.Enable(False)
        
        #Controls binding
        self.btnSpider.Bind(wx.EVT_BUTTON, self.onSpider, self.btnSpider)
        self.lsXSS.Bind(wx.EVT_LISTBOX,  self.xssSelected,  self.lsXSS)
        self.lsExploits.Bind(wx.EVT_LISTBOX,  self.exploitSelected,  self.lsExploits)
        self.lsExploitOptions.Bind(wx.EVT_LISTBOX,  self.exploitOptionSelected,  self.lsExploitOptions)
        self.txtOptionValue.Bind(wx.EVT_TEXT,  self.exploitOptionChange,  self.txtOptionValue)
        self.btnGenCode.Bind(wx.EVT_BUTTON,  self.genCode,  self.btnGenCode)
        self.btnAnalyze.Bind(wx.EVT_BUTTON,  self.onAnalyze,  self.btnAnalyze)
        self.btnRptSave.Bind(wx.EVT_BUTTON,  self.report,  self.btnRptSave)
        
        #Menu Handling
        EVT_MENU(self, self.mnuAbout.GetId(),  self.onAbout)
        EVT_MENU(self,  self.mnuSaveFormDB.GetId(),  self.onSaveDB)
        EVT_MENU(self,  self.mnuLoadFormDB.GetId(),  self.onLoadDB)
        EVT_MENU(self,  self.mnuXSRF.GetId(),  self.onXsrf)
        EVT_MENU(self,  self.mnuCodec.GetId(),  self.onCodec)
        EVT_MENU(self,  self.mnuPrefs.GetId(),  self.onPrefs)
        EVT_MENU(self,  self.mnuQuit.GetId(),  self.onQuit)
        
        #XSSploit vars
        self.wwwIOInstance=wwwIO()
        self.compilerInstance=compiler()
        self.xssCollection={}
        self.formDBInstance=None
        self.activeXss=None
        
        #Options
        self.useProxy=False
        self.proxyHost=''
        self.proxyPort=''
        self.proxyUser=''
        self.proxyPass=''
        self.useAuth=False
        self.authUser=''
        self.authPass=''
        self.maxParams=2
        self.doPermCheck=1

        #XSSploit inits
        self.loadExploitsList()

    def report(self,  event):
        """
        Creates a report
        """
        myReport=report()
        #Add the spidered pages
        if self.chkRptSpider.GetValue()==True:
            myReport.addItem(self.wwwIOInstance)
        #Add the forms found
        if self.chkRptForm.GetValue()==True:
            myReport.addItem(self.formDBInstance)
        #Add the exploitable XSS
        if self.chkRptXSS.GetValue()==True:
            for xss in self.xssCollection.values():
                if xss._exploitable<>xss.NOEXPLOIT:
                    #If we need example exploits
                    if self.chkRptExample.GetValue()==True:
                        self.compilerInstance.select('messagebox')
                        exploitExample=self.compilerInstance.exploit(xss)
                    myReport.addItem(xss,  ('example', exploitExample))
        #Add the possible XSS, but not usable by XSSploit
        if self.chkRptPXSS.GetValue()==True:
            for xss in self.xssCollection.values():
                if xss._exploitable==xss.NOEXPLOIT:
                    myReport.addItem(xss)
        filters = 'XML files (*.xml)|*.xml'
        dialog = wxFileDialog ( None, message = 'Save the report', wildcard = filters, style = wxSAVE)
        if dialog.ShowModal() == wxID_OK:
            myReport.write(dialog.GetPaths()[0])

    def onQuit(self,  event):
        """
        When the user presses the Quit menu
        Quits the application
        """
        sys.exit(0)

    def onPrefs(self,  event):
        """
        When the user selects the Preferences menu
        Displays the preferences dialog.
        """
        frmPrefs = OptionDialog(self, -1, "")
        frmPrefs.ShowModal()

    def onCodec(self,  event):
        """
        When th user selects the String encoder in the menu.
        """
        frmCodec = EncoderDialog(None, -1, "")
        frmCodec.Show()

    def onXsrf(self,  event):
        """
        When th user selects the XSRF editor in the menu.
        Displays the xsrf editor window.        
        """
        frmXSRF = XSRFDialog(None, -1, "")
        frmXSRF.Show()

    def onAbout(self,  event):
        """
        Then the user clicks on the About menu, display an about box...
        """
        dlg = wxMessageDialog(self, "This tool lets you find and play with XSS on web sites.", "About XSSploit", wxOK | wxICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()

    def onSaveDB(self,  event):
        if self.formDBInstance is not None:
            filters = 'XML files (*.xml)|*.xml'
            dialog = wxFileDialog ( None, message = 'Save the formDB', wildcard = filters, style = wxSAVE)
            if dialog.ShowModal() == wxID_OK:
                self.formDBInstance.write(dialog.GetPaths()[0])

    def onLoadDB(self,  event):
        filters = 'XML files (*.xml)|*.xml'
        dialog = wxFileDialog ( None, message = 'Load a form DB', wildcard = filters, style = wxOPEN)
        if dialog.ShowModal() == wxID_OK:
            del self.formDBInstance
            self.formDBInstance=formDB()
            self.formDBInstance.load(dialog.GetPaths()[0])
            self.displayFormDB()
            self.MainFrameStatusBar.SetStatusText('Form DB successfully loaded')            

    def genCode(self,  event):
        if self.cmbExploitableXss.GetValue() is not '':
            XSS=self.cmbExploitableXss.GetValue()
            index=XSS[:XSS.find(' - ')]
            try:
                exploitableXss=self.xssCollection[index]
            except KeyError:
                self.MainFrameStatusBar.SetStatusText('No exploitable XSS selected, please select one')
                return
            self.txtJavaCode.SetValue(self.compilerInstance._getExploitCode())
            self.txtExploitUrl.SetValue(self.compilerInstance.exploit(exploitableXss))
            self.MainFrameStatusBar.SetStatusText('Gode generated !')

    def exploitOptionChange(self,  event):
        self.compilerInstance.set(self.lsExploitOptions.GetStringSelection(),  self.txtOptionValue.GetValue())

    def exploitSelected(self,  event):
        self.txtOptionValue.SetValue('')
        #Select the exploit in the self.compilerInstance
        self.compilerInstance.select(self.lsExploits.GetStringSelection())
        #Set the description
        try:
            self.lblExploitDescription.SetLabel(self.compilerInstance.exploits[self.lsExploits.GetStringSelection()])
            #Display the options in the list
            self.lsExploitOptions.Set(self.compilerInstance.options.keys())
            self.MainFrameStatusBar.SetStatusText('Exploit '+ self.lsExploits.GetStringSelection() + ' selected')
        except KeyError:
            pass
    
    def exploitOptionSelected(self,  event):
        #Display the content of the option
        try:
            self.txtOptionValue.SetValue(self.compilerInstance.options[self.lsExploitOptions.GetStringSelection()])
        except KeyError:
            return

    def loadExploitsList(self):
        for exploit in self.compilerInstance.exploits:
            self.lsExploits.InsertItems([exploit],  0)

    def displayFormDB(self):
        self.trvForms.DeleteAllItems()
        root=self.trvForms.AddRoot('Forms found')
        for form in self.formDBInstance._forms:
            formRoot=self.trvForms.AppendItem(root, form[1])
            for param in self.formDBInstance.getParamNames(form[0]):
                self.trvForms.AppendItem(formRoot, param)

    def onSpider(self,  event):
        """
        When the user clicks on the Spider button
        """
        self.btnAnalyze.Enable(False)
        #TODO: Add threading here
        #spiderThread=threading.Thread(target=self.spider,  args=())
        #spiderThread.start()
        self.spider()
        self.btnAnalyze.Enable(True)

    def spider(self):
        """
        Launches the spider process
        """
        url=self.txtUrl.GetValue()
        self.wwwIOInstance.setTimeout(5)
        self.MainFrameStatusBar.SetStatusText('Spidering the site...'+ url)
        self.formDBInstance=self.wwwIOInstance.spider(url)
        self.lsPages.Set(self.wwwIOInstance._urlSearched)
        self.displayFormDB()
        self.MainFrameStatusBar.SetStatusText('Spider process finished')

    def onAnalyze(self,  event):
        """
        When the user clicks on the analyze button
        """
        self.btnSpider.Enable(False)
        #TODO: Add threading here
        #analyzeThread=threading.Thread(target=self.analyze,  args=())
        #analyzeThread.start()
        self.analyze()
        self.btnSpider.Enable(True)

    def analyze(self):
        self.lsXSS.Clear()
        self.cmbExploitableXss.Clear()
        self.xssCollection={}
        self.MainFrameStatusBar.SetStatusText('Analyzing the forms...')
        xssAnalyzerInstance=xssAnalyzer(self.wwwIOInstance)
        xssAnalyzerInstance.setAnalysisMode(self.maxParams)
        xssCollection=xssAnalyzerInstance.analyzeFormDB(self.formDBInstance,  self.doPermCheck)
        index=0
        for item in xssCollection:
            xssAnalyzerInstance.analyzeXSS(item)
            if item._exploitable>xss.NOEXPLOIT:
                self.cmbExploitableXss.Insert(str(index)+' - '+item.url+' ('+item.vulnerableParameter+')', 0)
            self.lsXSS.InsertItems([str(index)+' - '+item.url+' ('+item.vulnerableParameter+')'],  0)
            #We build a dictionnary to recover the xss objects later...
            self.xssCollection.update({str(index):item})
            index=index+1
        self.MainFrameStatusBar.SetStatusText('Analysis finished - '+str(self.cmbExploitableXss.GetCount())+' exploitable XSS on '+ str(len(self.xssCollection)) + '.')

    def xssSelected(self,  event):
        try:
            XSS=self.lsXSS.GetStringSelection()
            index=XSS[:XSS.find(' - ')]
            self.activeXss=self.xssCollection[index]
            self.printXssInfo()
        except KeyError:
            pass

    def printXssInfo(self):
        self.trvXssSummary.DeleteAllItems()
        root=self.trvXssSummary.AddRoot('XSS')
        secRoot=self.trvXssSummary.AppendItem(root, 'Exploitable')
        if self.activeXss._exploitable==xss.NOEXPLOIT:
            self.trvXssSummary.AppendItem(secRoot, 'No')
        else:
            self.trvXssSummary.AppendItem(secRoot, 'Yes')
        secRoot=self.trvXssSummary.AppendItem(root, 'URL')
        self.trvXssSummary.AppendItem(secRoot, self.activeXss.url)
        secRoot=self.trvXssSummary.AppendItem(root, 'Type')
        self.trvXssSummary.AppendItem(secRoot, self.activeXss.type)
        secRoot=self.trvXssSummary.AppendItem(root, 'Method')
        self.trvXssSummary.AppendItem(secRoot, self.activeXss.method)
        secRoot=self.trvXssSummary.AppendItem(root, 'Vulnerable parameter')
        self.trvXssSummary.AppendItem(secRoot, self.activeXss.vulnerableParameter)
        secRoot=self.trvXssSummary.AppendItem(root,  'Other parameters')
        for param in self.activeXss.parameters:
            self.trvXssSummary.AppendItem(secRoot, param+'='+self.activeXss.parameters[param])
        if len(self.activeXss.badChars)>0:
            secRoot=self.trvXssSummary.AppendItem(root, 'Bad characters')
            for bad in self.activeXss.badChars:
                self.trvXssSummary.AppendItem(secRoot, bad)
        if len(self.activeXss.context)>0:
            secRoot=self.trvXssSummary.AppendItem(root, 'Contexts')
            for context in self.activeXss.context:
                self.trvXssSummary.AppendItem(secRoot, context[1].replace('\n',  ' '))
        self.trvXssSummary.ExpandAll()

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("XSSploit")
        self.SetSize((1024, 680))
        self.MainFrameStatusBar.SetStatusWidths([-1])
        # statusbar fields
        MainFrameStatusBar_fields = ["Welcome to XSSploit"]
        for i in range(len(MainFrameStatusBar_fields)):
            self.MainFrameStatusBar.SetStatusText(MainFrameStatusBar_fields[i], i)
        self.btnGenCode.SetFocus()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_5 = wx.GridSizer(2, 1, 0, 0)
        grid_sizer_6 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_11 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_4 = wx.GridSizer(1, 2, 0, 0)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2 = wx.GridSizer(1, 2, 0, 0)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_3 = wx.GridSizer(1, 1, 0, 0)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(1, 1, 0, 0)
        sizer_3.Add(self.txtUrl, 0, wx.ALL|wx.EXPAND, 2)
        sizer_3.Add(self.btnSpider, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        sizer_4.Add(self.label_1, 0, 0, 0)
        grid_sizer_1.Add(self.lsPages, 0, wx.ALL|wx.EXPAND, 2)
        sizer_4.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_10.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_15.Add(self.label_4, 0, 0, 0)
        grid_sizer_3.Add(self.trvForms, 1, wx.ALL|wx.EXPAND, 2)
        sizer_15.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        sizer_15.Add(self.btnAnalyze, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        sizer_10.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_10, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(sizer_3)
        sizer_2.Add(self.label_2, 0, 0, 0)
        grid_sizer_2.Add(self.lsXSS, 0, wx.ALL|wx.EXPAND, 2)
        grid_sizer_2.Add(self.trvXssSummary, 1, wx.ALL|wx.EXPAND, 2)
        sizer_2.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_2.Add(self.static_line_1, 0, wx.ALL|wx.EXPAND, 2)
        self.notebook_1_pane_3.SetSizer(sizer_2)
        sizer_16.Add(self.label_19, 0, wx.ALL, 2)
        sizer_16.Add(self.cmbExploitableXss, 0, wx.ALL|wx.EXPAND, 2)
        sizer_16.Add(self.static_line_8, 0, wx.ALL|wx.EXPAND, 2)
        sizer_16.Add(self.label_3, 0, wx.LEFT|wx.TOP, 2)
        grid_sizer_4.Add(self.lsExploits, 0, wx.ALL|wx.EXPAND, 2)
        grid_sizer_4.Add(self.lblExploitDescription, 0, wx.ALL, 2)
        sizer_16.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        sizer_16.Add(self.label_6, 0, wx.LEFT|wx.TOP, 2)
        grid_sizer_11.Add(self.lsExploitOptions, 0, wx.ALL|wx.EXPAND, 2)
        grid_sizer_11.Add(self.txtOptionValue, 0, wx.ALL|wx.EXPAND, 2)
        sizer_16.Add(grid_sizer_11, 1, wx.EXPAND, 0)
        sizer_16.Add(self.btnGenCode, 0, wx.ALL|wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_6.Add(self.txtJavaCode, 0, wx.ALL|wx.EXPAND, 2)
        grid_sizer_6.Add(self.txtExploitUrl, 0, wx.ALL|wx.EXPAND, 2)
        grid_sizer_5.Add(grid_sizer_6, 1, wx.EXPAND, 0)
        sizer_16.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        self.notebook_1_pane_4.SetSizer(sizer_16)
        sizer_6.Add(self.label_10, 0, 0, 0)
        sizer_6.Add(self.static_line_5, 0, wx.EXPAND, 0)
        sizer_6.Add(self.chkRptSpider, 0, 0, 0)
        sizer_6.Add(self.chkRptForm, 0, 0, 0)
        sizer_6.Add(self.chkRptXSS, 0, 0, 0)
        sizer_6.Add(self.chkRptPXSS, 0, 0, 0)
        sizer_6.Add(self.chkRptExample, 0, 0, 0)
        sizer_6.Add(self.btnRptSave, 0, 0, 0)
        self.notebook_1_pane_5.SetSizer(sizer_6)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "Scan")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "XSS")
        self.notebook_1.AddPage(self.notebook_1_pane_4, "Exploit")
        self.notebook_1.AddPage(self.notebook_1_pane_5, "Report")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
    
# end of class MainFrame

if __name__ == "__main__":
    import getopt
    try:
        opts, args = getopt.getopt(sys.argv[1:], "l:")
    except getopt.GetoptError, err:
        pass
    for o, a in opts:
        #Define log file
        if o == "-l":
            logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s', filename=a, filemode='w')
            logging.info('logging in '+a)
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MainFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
